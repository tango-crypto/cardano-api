version: '3'
services:
  cardano-api:
    build:
      context: .
      target: build
    command: npm run start:dev
    env_file: .env
    ports:
      - target: 3000
        published: 3000
        protocol: tcp
        mode: host
    volumes:
      - .:/opt/node_app/app/
    depends_on:
      redis:
         condition: service_healthy
      scylladb:
        condition: service_healthy
        
  redis:
    image: redis:6.2.6
    command: redis-server
    ports:
      - target: 6379
        published: 6377
        protocol: tcp
        mode: host
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping | grep PONG"]
      interval: 1s
      timeout: 3s
      retries: 5

  scylladb:
    image: scylladb/scylla
    container_name: scylladb
    command:
      - --alternator-port 8000
      - --alternator-write-isolation always
    volumes:
      - /var/lib/scylla:/var/lib/scylla
    healthcheck:
        test: ["CMD-SHELL", "[ $$(nodetool statusgossip) = running ]"]
        interval: 10s
        timeout: 5s
        retries: 10

  db:
    image: postgres:14.10-alpine
    restart: on-failure
    env_file: .env
    environment:
      - POSTGRES_LOGGING=true
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_PASSWORD=${DB_PWD}
      - POSTGRES_USER=${DB_USER}
    ports:
      - '5432:5432'
    volumes: 
      - db:/var/lib/postgresql/data
      # - ./db/create_role.sql:/docker-entrypoint-initdb.d/create_role.sql
      # - ./db/init.sql:/docker-entrypoint-initdb.d/testnet-02-16-2023.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    command: ${POSTGRES_ARGS:--c maintenance_work_mem=1GB -c max_parallel_maintenance_workers=4}
    logging:
      driver: "json-file"
      options:
        max-size: "200k"
        max-file: "10"

  cardano-node:
    image: ghcr.io/intersectmbo/cardano-node:8.7.3
    environment:
      - NETWORK=${NETWORK:-mainnet}
    volumes:
      - node-db:/data/db
      - node-ipc:/ipc
    restart: on-failure
    healthcheck:
      # Ping the EKG port to see if it responds.
      # Assuming if EKG isn't up then the rest of cardano-node isn't either.
      test: ["CMD-SHELL", "curl -f 127.0.0.1:12788 || exit 1"]
      interval: 60s
      timeout: 10s
      retries: 5
    logging:
      driver: "json-file"
      options:
        max-size: "200k"
        max-file: "10"

  cardano-db-sync:
    image: ghcr.io/intersectmbo/cardano-db-sync:13.2.0.1
    working_dir: /var/lib/cexplorer
    env_file: .env
    environment:
      # - DISABLE_LEDGER=${DISABLE_LEDGER}
      - NETWORK=${NETWORK:-mainnet}
      - POSTGRES_HOST=${DB_HOST}
      - POSTGRES_PORT=${DB_PORT}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PWD}
      - POSTGRES_DB=${DB_NAME}
      - RESTORE_SNAPSHOT=${RESTORE_SNAPSHOT:-}
      - RESTORE_RECREATE_DB=N
      - EXTRA_DB_SYNC_ARGS=${EXTRA_DB_SYNC_ARGS:-}
    depends_on:
      # Depend on both services to be healthy before starting.
      cardano-node:
        condition: service_healthy
      db:
        condition: service_healthy
    volumes:
      - db-sync-data:/var/lib/cexplorer
      - node-ipc:/node-ipc
    restart: on-failure
    logging:
      driver: "json-file"
      options:
        max-size: "200k"
        max-file: "10"
      
volumes:
  db-sync-data:
  db:
    driver: local
  node-db:
  node-ipc:
